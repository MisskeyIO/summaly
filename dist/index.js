import{EventEmitter}from"node:events";import{URL}from"node:url";import lookupAddresses from"./utils/dns.js";import{StatusError}from"./utils/status-error.js";import{StatusRedirect}from"./utils/status-redirect.js";import{got}from"got";import PrivateIp from"private-ip";import{general}from"./general.js";import{plugins as builtinPlugins}from"./plugins/_.js";import{DEFAULT_OPERATION_TIMEOUT,DEFAULT_RESPONSE_TIMEOUT,agent,setAgent}from"./utils/got.js";EventEmitter.defaultMaxListeners=25;export*from"./iplugin.js";export const summalyDefaultOptions={lang:null,maxRedirects:3,plugins:[]};export const summaly=async(url,options)=>{if(options?.agent)setAgent(options.agent);const opts={...summalyDefaultOptions,...options};if(opts.followRedirects===false){opts.maxRedirects=0}const plugins=builtinPlugins.concat(opts.plugins||[]);const requestUrl=new URL(url);const addresses=await lookupAddresses(requestUrl.hostname);const allowPrivateIp=process.env.SUMMALY_ALLOW_PRIVATE_IP==="true"||Object.keys(agent).length>0;if(!allowPrivateIp&&addresses.some(addr=>PrivateIp(addr))){console.warn(`Access to Private Networks is not allowed: ${requestUrl.host}`);throw new StatusError("Access to Private Networks is not allowed",requestUrl,403,"Forbidden")}let actualUrl=url;try{const timeout=opts.responseTimeout??DEFAULT_RESPONSE_TIMEOUT;const operationTimeout=opts.operationTimeout??DEFAULT_OPERATION_TIMEOUT;actualUrl=await got.head(url,{timeout:{lookup:timeout,connect:timeout,secureConnect:timeout,socket:timeout,response:timeout,send:timeout,request:operationTimeout},followRedirect:(opts.maxRedirects??3)>0,maxRedirects:opts.maxRedirects??3,agent,http2:false,retry:{limit:0}}).then(res=>res.url);if(url!==actualUrl){opts.followRedirects=false;opts.maxRedirects=0}}catch{}const _url=new URL(actualUrl);const match=plugins.filter(plugin=>plugin.test(_url))[0];const scrapingOptions={lang:opts.lang,userAgent:opts.userAgent,maxRedirects:opts.maxRedirects,responseTimeout:opts.responseTimeout,operationTimeout:opts.operationTimeout,contentLengthLimit:opts.contentLengthLimit,contentLengthRequired:opts.contentLengthRequired};const summary=await (match?match.summarize:general)(_url,scrapingOptions);if(summary==null){throw new Error(`Preview not available: Unable to summarize ${actualUrl}`)}return Object.assign(summary,{url:actualUrl})};export default function(fastify,options,done){fastify.get("/",async(req,reply)=>{const url=req.query.url;if(url==null){return reply.status(400).send({error:"url is required"})}try{return await summaly(url,{lang:req.query.lang,...options})}catch(e){if(e instanceof StatusRedirect){return reply.status(200).send({title:e.message,icon:null,description:null,thumbnail:null,player:{url:null,width:null,height:null,allow:["autoplay","encrypted-media","fullscreen"]},sitename:e.requestUrl.host,sensitive:false,url:e.location??e.requestUrl.href,activityPub:null,fediverseCreator:null,error:e})}else if(e instanceof StatusError){return reply.status(200).send({title:e.message,icon:null,description:null,thumbnail:null,player:{url:null,width:null,height:null,allow:["autoplay","encrypted-media","fullscreen"]},sitename:e.requestUrl.host,sensitive:false,url:e.requestUrl.href,activityPub:null,fediverseCreator:null,error:e})}else{return reply.status(500).send({error:e})}}});done()}